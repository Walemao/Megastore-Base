<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
								http://www.springframework.org/schema/beans/spring-beans.xsd
								http://www.springframework.org/schema/security
								http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 方法保护 -->
	<global-method-security secured-annotations="enabled"
		jsr250-annotations="disabled" pre-post-annotations="enabled" />

	<!-- 不需要Security保护的资源 -->
	<http pattern="/resources/**" security="none" />

	<!-- 前台后台URL识别 -->
	<beans:bean id="loginUrlEntryPoint"
		class="com.walemao.megastore.filter.LoginUrlEntryPoint"></beans:bean>

	<!-- 验证前台用户 -->
	<beans:bean id="loginFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="org.springframework.security.authenticationManager" />
		<beans:property name="usernameParameter" value="username"></beans:property>
		<beans:property name="passwordParameter" value="password"></beans:property>
		<beans:property name="authenticationFailureHandler"
			ref="failureHandler" />
		<beans:property name="authenticationSuccessHandler"
			ref="successHandler" />
		<beans:property name="filterProcessesUrl" value="/login" />
	</beans:bean>

	<beans:bean id="failureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/login.html?error=true" />
	</beans:bean>

	<beans:bean id="successHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="alwaysUseDefaultTargetUrl" value="true" />
		<beans:property name="defaultTargetUrl" value="/index" />
	</beans:bean>

	<!-- 验证后台用户 -->
	<beans:bean id="adminLoginFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="org.springframework.security.authenticationManager" />
		<beans:property name="usernameParameter" value="username"></beans:property>
		<beans:property name="passwordParameter" value="password"></beans:property>
		<beans:property name="authenticationFailureHandler"
			ref="adminFailureHandler" />
		<beans:property name="authenticationSuccessHandler"
			ref="adminSuccessHandler" />
		<beans:property name="filterProcessesUrl" value="/admin/login" />
	</beans:bean>

	<beans:bean id="adminFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/admin/login.html?error=true" />
	</beans:bean>

	<beans:bean id="adminSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="alwaysUseDefaultTargetUrl" value="true" />
		<beans:property name="defaultTargetUrl" value="/admin/index" />
	</beans:bean>

	<!-- 注销过滤器，完成前台用户注销时的定向功能 -->
	<beans:bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<beans:constructor-arg value="/login.html" />
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</beans:list>
		</beans:constructor-arg>
		<beans:property name="filterProcessesUrl" value="/logout" />
	</beans:bean>
	
	<!-- 注销过滤器，完成后台用户注销时的定向功能 -->
	<beans:bean id="adminLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<beans:constructor-arg value="/admin/login.html" />
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</beans:list>
		</beans:constructor-arg>
		<beans:property name="filterProcessesUrl" value="/admin/logout" />
	</beans:bean>

	<!-- 需要Security保护的资源 -->
	<http entry-point-ref="loginUrlEntryPoint">
		<intercept-url pattern="/login.**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/admin/login.**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
		<intercept-url pattern="/user/**" access="ROLE_USER" />


		<!-- 登录过滤器 -->
		<custom-filter before="FORM_LOGIN_FILTER" ref="loginFilter" />
		<custom-filter position="FORM_LOGIN_FILTER" ref="adminLoginFilter" />

		<!-- 注销过滤器 -->
		<custom-filter before="LOGOUT_FILTER" ref="logoutFilter" />
		<custom-filter position="LOGOUT_FILTER" ref="adminLogoutFilter" />

		<!-- Header管理 -->
		<headers>
			<cache-control /> <!-- XSS -->
			<content-type-options />
			<frame-options />
			<xss-protection />
		</headers>

		<!-- Session策略 -->
		<session-management session-fixation-protection="migrateSession">
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="false" expired-url="/login.html" />
		</session-management>

		<!-- Token策略 -->
		<csrf />

	</http>
	
	<!-- 盐 -->
	<beans:bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<beans:property name="userPropertyToUse" value = "username"></beans:property>
	</beans:bean>
	
	<!-- md5加密方式 -->
	<beans:bean id="md5" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder">
	</beans:bean>
	
	<beans:bean id = "userDetailsService" class="com.walemao.megastore.domain.Authentication.UsernameJdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="usersByUsernameQuery" 
			value = "select u_username as username, u_password as password, u_enabled as enabled, u_salt as salt from t_user where u_username = ?"/>
		<beans:property name="authoritiesByUsernameQuery" value="select username, authority from t_user_authority where username = ?"/>
	</beans:bean>
	
	<!-- userDetailsService获取jdbc数据 -->
	<!-- <jdbc-user-service id="userDetailsService" 
				data-source-ref="dataSource"
				users-by-username-query="select u_username as username, u_password as password, u_enabled as enabled from t_user where u_username = ?"
				authorities-by-username-query="select username, authority from t_user_authority where username = ?"/> -->

	<beans:bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="passwordEncoder" ref="md5"></beans:property>
		<beans:property name="saltSource" ref="saltSource"></beans:property>
		<beans:property name="userDetailsService" ref="userDetailsService"></beans:property>
	</beans:bean>
	
	
	<beans:bean id = "registrationUsernameProvider" class="com.walemao.megastore.domain.Authentication.RegistrationUsernameProvider">
		<beans:property name="userDetailsService" ref="userDetailsService"></beans:property>
		<beans:property name="passwordEncoder" ref="md5"></beans:property>
	</beans:bean>
	
	<!-- ======================== AUTHENTICATION ======================= -->
	<beans:bean  id="org.springframework.security.authenticationManager"  class="org.springframework.security.authentication.ProviderManager">
		<beans:property name="providers">
			<beans:list>
				<beans:ref local="daoAuthenticationProvider"/>
			</beans:list>
		</beans:property>
	</beans:bean>
</beans:beans>